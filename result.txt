Longest even/odd sequence

    class Program
    {
        static void Main(string[] args)
        {
            int[] n = new int[] {2,3,2,4,6,8,3,1,5,7,2,6,8,12,18,20,2};
            int sum = 0,s,e,count=0,sum1=0,count1=0;
            for (int i = 0; i < n.Length; i++)
            {
                if (n[i] % 2== 0) //if (n[i] % 2!= 0)
                {

                    sum += n[i];
                  
                    count++;
                    if ( (i == (n.Length - 1))&& (count > count1)) {

                        count1 = count;
                        sum1 = sum;
                        count = 0;
                        sum = 0;
                    }

                }
                else if(count > count1)
                    {
        
                    count1 = count;
                        sum1 = sum;
                        count = 0;
                    sum = 0;
                    }
                    
                    
                
            }
            Console.WriteLine(sum1);
}

********************************************************************************************************
Token

public class UserMainCode
{
    public string findSequence(int input1,string[] input2,int[] input3)
    {
        //Read only region end
        //Write code here
        int[] n=new int[input1];
		string s="";
		int[] arr=new int[3];
		for(int i=0;i<input1;i++)
		{
			n[i]=input3[i];
		}
		Array.Sort(n);
		for(int j=0;j<input1-2;j++)
		{
			if(n[j]+1==n[j+1] && n[j+1]+1==n[j+2])
			{
				arr[0]=n[j];
			}
		}
			if(arr[0]!=0)
			{
				arr[1]=arr[0]+1;
				arr[2]=arr[1]+1;
			     for(int k=0;k<input1;k++)
			      {
				       if(arr[0]==input3[k])
				             {
					           s=s+input2[k]+":";
				              }
			        }
			      for(int k=0;k<input1;k++)
			   {
				if(arr[1]==input3[k])
				{
					s=s+input2[k]+":";
				}
			 }
			for(int k=0;k<input1;k++)
			{
				if(arr[2]==input3[k])
				{
					s=s+input2[k];
				}
			}
	return s;
			
		}
		else
		{
			return "NONE";
		}
		
    }
}
*************************************************************************************************************
==> Add_Least_3

 int[] input1 = { 12345, 74831, 65412 };
            int sum = 0,k=0,p=0;
            int[] arr2 = new int[10];
            for (int i=0;i<input1.Length;i++)
            {
                int len = input1[i];
                int[] arr1 = new int[len];
                while(input1[i]>0)
                {
                    arr1[k++] = input1[i] % 10;
                    input1[i] /= 10;
                }
                Array.Sort(arr1);
                string s = arr1[0].ToString()+ arr1[1].ToString()+ arr1[2].ToString();
                
                arr2[p++] = int.Parse(s);
                Console.WriteLine(arr2);
                Array.Clear(arr1, 0, arr1.Length);
               // Array.Clear(arr1, 0, arr1.Length);
            }
            for(int j=0;j<arr2.Length;j++)
            {
                sum += arr2[j];
            }
            Console.WriteLine(sum);
            Console.ReadKey();
------------------------------------------------------------------------------------------------

Add_Prime no.


 int[] arr1 = { 1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14 };
            int[] arr2 = new int[11];
            int m = 0;
            int sum = 0;
            int count = 0;
            for (int i = 0; i < arr1.Length; i++)
            {
                for (int k = 2; k < arr1[i]; k++)
                {
                    if (arr1[i] % k == 0)
                    {
                        count++;
                    }
                }
                if (count == 0 && arr1[i]!=1)
                {
                    arr2[m++] = arr1[i];
                }
                count = 0;
            }
            for (int j = 0; j < arr2.Length; j++)
            {
                sum += arr2[j];
            }
            int max = arr2.Max();
            Console.WriteLine(max - sum);
            Console.ReadKey();

---------------------------------------------------------------------------------
Find The One Digit And Remove From Palindrome:                



		int[] a=new int[10];
		int temp=0,temp1=0,cnt=0,index=0,num=0,num1=0,b=0,sum=0;
		num=input1;
		num1=input1;
		while(input1!=0)
		{
			temp=input1%10;
			a[temp]=a[temp]+1;
			input1=input1/10;
		}
		while(num!=0)
		{
			temp1=num%10;
			sum=sum*10+temp1;
			num=num/10;
		}
		for(int i=9;i>=0;i--)
		{
			if(a[i]==1)
			{
				cnt++;
				index=i;
				break;
			}
		}
		if(cnt==1&&sum!=num1)
		{
			b=index;
		}
		else  if(sum==num1)
		{
			b=-1;
		}
		return b;

=====================================================================

Stable Unstable:
            	


		int [] a={input1,input2,input3,input4,input5};
		int [] a1=new int[10];
		int num,temp,dig=0,count=0,sum=0,sum1=0;
		for(int i=0;i<a.Length;i++)
		{
			num=a[i];
			while(num!=0)
			{
				temp=num%10;
				a1[temp]=a1[temp]+1;
				num=num/10;
			}
			for(int j=0;j<=9;j++)
			{
				if(a1[j]==0)
				{
					
				}
				else if(a1[j]!=0)
				{
					dig=a1[j];
					break;
				}
			}
			Console.WriteLine(dig);
			for(int j=0;j<=9;j++)
			{
				if(a1[j]!=dig&&a1[j]!=0)
				{
					count++;
					break;
					
				}
			}
			Console.WriteLine(count);
			if(count==1)
			{
				sum=sum+a[i];
			}
			else 
			{
				sum1=sum1+a[i];
			}
			num=0;
			dig=0;
			count=0;
			Array.Clear(a1,0,a1.Length);
		}
        return (sum1-sum);
******************************************************************************
Wipro test

==>20_mark

 int sum = 0, k = 0, multi = 1;
            
            int[] arr = { 1, -2, 3, -4, -5, -6, -3, -1, 7, 8, 9, 12, 14, 15, 17, 21, 23, 27, 34, -36, -3, -2, -12, 16, 18, 20 };
            string str = "wipro test";
            str = str.ToUpper();
            string[] s = str.Split(' ');
            int[] arr2 = new int[s.Length];

            for (int i=0;i<s.Length;i++)
            {
                char[] c = s[i].ToCharArray();
                for(int j=0;j<c.Length;j++)
                {
                    int n = (int)c[j] - 64;
                    // sum += arr[n];
                    if (j == 0 || j == c.Length - 1)
                    {
                        if (arr[n-1] < 0)
                        {
                            sum += n;
                        }
                        else
                        {
                            sum += arr[n-1];
                        }
                    }
                    else
                    {

                        sum += arr[n-1];
                    }
                }
                arr2[k++] = sum;
                //Console.WriteLine(sum);
                sum = 0;
            }

            for(int l=0;l<arr2.Length;l++)
            {
                multi = multi * arr2[l];
            }

            
           Console.WriteLine(multi);
           Console.ReadKey();

*******************************************************************************************************
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public string FindPassword(string input1,string input2)
    {
        //Read only region end
        //Write code here
        string[] s=split(input1);
		string[] s1=split(input2);
		string res=s[2]+s1[1]+s[0];
		return res;
    }
	string[] split(string i)
	{
		int q=i.Length/3;
		int r=i.Length%3;
		string[] arr=new string[3];
		
		arr[0]=i.Substring(q*0,q);
		arr[1]=i.Substring(q*1,q+r);
		arr[2]=i.Substring(2*q+r,q);
		return arr;
	}
}

**********************************************************************************
Alternate add sub

int r,n=input1,o=input2;
r=n--;
while(n>0)
{
  if(o==1)
  {
    r-=n--;
    o=2;
  }
  else
  {
    r+=n--;
    o=1;
  }
}
return r;

--------------------------------
SumOfSumOfDigits

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int sumOfSumsOfDigits(int input1)
    {
        //Read only region end
        //Write code here
        int s,a=0,sum=0;
		int[] arr=new int[input1.ToString().Length];
			for(int i=0;i<arr.Length;i++)
			{
			     s=input1%10;
			     arr[i]=s;
			     input1/=10;
			}
		Array.Reverse(arr);
			for(int i=0;i<arr.Length;i++)
			{
				sum=0;
				for(int j=i;j<arr.Length;j++)
				{
					sum += arr[j];
				}
				a=a+sum;
			}
			return a;
		}
	
    }
-------------------------------------------------------------------------------------------------
Sum of power digits

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int sumOfPowerOfDigits(int input1)
    {
        //Read only region end
        //Write code here
		double d=0;
        int [] arr = new int[input1.ToString().Length];
		for(int i=0;i<arr.Length;i++)
		{
			int s = input1%10;
			arr[i] = s;
			input1=input1/10;
		}
		Array.Reverse(arr);
		for(int i=0;i<arr.Length-1;i++)
		{
			for(int j=i;j<=i;j++)
			{
				d =d+ Math.Pow(arr[i],arr[j+1]);
			}
		}
		d=d+1;
		return (int)d;
    }
}
-----------------------------------------------------------------
Dvvi_fibonacii

using System;

namespace devisquestion
{
    class Program
    {
        static void Main(string[] args)
        {
            int input1 = 1,input2 = 3,input3 = 7, input4 = 9,d = 0, sum = 0;

            int[] arr = new int[input4];
            arr[0] = input1;
            arr[1] = input2;
            arr[2] = input3;

            d = input2 - input1;
            int e = input3 - input2;

            for(int i=3;i<arr.Length;i++)
            {
                if (i % 2 == 0)
                {
                    sum = arr[i-1] + e;
                    arr[i] = sum;
                }
                else
                {
                    sum = arr[i-1] + d;
                    arr[i] = sum;
                }
            }
            Console.WriteLine(arr[input4-1]);
            Console.ReadKey();
        }
    }
}

--------------------------------------------------------------------------------------------
simple encoded array

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    //Assume following return types while writing the code for this question. 
    public class Result
    {
		public int output1;
		public int output2;
    }

    public Result findOriginalFirstAndSum(int[] input1,int input2)
    {
        //Read only region end
        //Write code here
        int sum =0;
        int[] arr=new int[input1.Length];

		Array.Reverse(input1);
		int a = 0;
		arr[0]=input1[0];
		for(int i=0;i<arr.Length-1;i++)
		{
			 arr[i+1] = input1[i+1] - arr[i];
		}
		
		a = arr[arr.Length-1];
		Array.Reverse(arr);

		for(int i=0;i<arr.Length;i++)
		{
			sum = sum +arr[i];
		}
		
		Result obj = new Result();
		 obj.output1=a;
		 obj.output2=sum;
		
		return obj;
		}
    }
----------------------

Longest positive sequence

using System;
namespace Longest_positive_sequence
{
    class PositiveSequence
    {
        static void Main(string[] args)
        {
            int c = 0, s = 0, final = 0;
            int[] arr = { -2, -3, -5, 8, 5, 5, 7, -9, -6, 8, 2, 7, 6, 3, 3, 2, 9, 3, 5, -3, 3, 3, 3, 3, 3, -9, 9, 6, -9,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-9,8};

            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i] >= 0)
                {
                    c++;
                    if (c >= final)
                    {
                        final = c;
                    }
                    if (i == arr.Length - 1)
                    {
                        s = s + 1;
                    }
                }
                else
                {
                    if (c > 1)
                    {
                        s = s + 1;
                    }
                    c = 0;
                }
            }

            Console.WriteLine(s);
            Console.WriteLine(final);
            Console.ReadKey();
        }
    }
}
-------------------------------------------------------------------

Longest even sequence

using System;

namespace EvenSequence
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] input1 = { -2, -4, 4, 8, 2,-2, 8, 2, 8, -7, -8,8,2, 4, 2, 4, 8, 2, -8, 5, -7, 3, 2, 4, 8, -3 ,8,8,8,8,8,8,8,8,8,8,-9,3,8};
            int input2 = input1.Length;
            int c = 0, s = 0;
            int final = 0;
            for (int i = 0; i < input2; i++)
            {
                if (input1[i] >= 0)
                {
                    if (input1[i] % 2 == 0)
                    {
                        c++;
                        if (c >= final)
                        {
                            final = c;
                        }
                        if (i == input2 - 1)
                        {
                            s = s + 1;
                        }
                    }
                }
                else
                {
                    if (c >= 1)
                    {
                        s = s + 1;
                        //c = 0;
                    }
                    c = 0;
                }
            }
            Console.WriteLine(s);
            Console.WriteLine(final);
            Console.ReadKey();
        }
    }
}
-----------------------

Confirm decreasing sequence

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    //Assume following return types while writing the code for this question. 
    public class Result
    {
		public int output1;
		public int output2;
    }

    public Result decreasingSeq(int[] input1,int input2)
    {
        //Read only region end
        //Write code here
        int c=1,s=0;
		int final=0;
		for(int i=0;i<input2-1;i++)
		{
			if(input1[i]>input1[i+1])
			{
				c++;
				if(c>=final)
				{
					final = c;
				}
				if(i ==input2-2)
				{
					s=s+1;
				}
			}
			else
			{
				if(c>1)
				{
					s=s+1;
				}
				c=1;
			}
		}
		Result obj = new Result();
		obj.output1=s;
		obj.output2 =final;
		return obj;
    }
}
-----------------------

Most frequent digit

//Read only region start
public class UserMainCode
{
    public int mostFrequentlyOccurringDigit(int[] input1,int input2)
    {
        //Read only region end
int[] arr = new int[10];
		int a,s;
		for(int i=0;i<input2;i++)
		{
			a=0;
			a = input1[i];
			s=0;
			while(a!=0)
			{
				 s = a%10;
			     arr[s]++;
			     a=a/10;
			}
		}
		int max = arr[0];
		for(int i =1;i<arr.Length;i++)
		{
			if(max < arr[i])
			{
				max = arr[i];
			}
		}
		int f = 0;
		for( int i=arr.Length-1;i>0;i--)
		{
			if(max == arr[i])
			{
				f = i;
				break;
			}
		}
		return f;
    }
}
-----------------
Encoding 3 string

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    //Assume following return types while writing the code for this question. 
    public class Result
    {
		public string output1;
		public string output2;
		public string output3;
    }

    public Result encodeThreeStrings(string input1,string input2,string input3)
    {
        //Read only region end
        //Write code here
        
		string a=input1,b=input2,c=input3,af,am,ae,bf,bm,be,cf,cm,ce,t;
		int i;

		splitter(a,out af,out am,out ae);
		splitter(b,out bf,out bm,out be);
		splitter(c,out cf,out cm,out ce);
		Result obj=new Result();
		obj.output1=af+bf+cf;
		obj.output2=am+bm+cm;
		t=ae+be+ce;
		obj.output3="";
		for(i=0;i<t.Length;i++)
			if(Char.IsUpper(t[i]))obj.output3+=t[i].ToString().ToLower();
			else obj.output3+=t[i].ToString().ToUpper();
		return obj;
    }
	public static void splitter(string s,out string sf,out string sm,out string se)
	{
		int l=s.Length;
		if(l%3==0)
		{
			sf=s.Substring(0,l/3);
			sm=s.Substring(l/3,l/3);
			se=s.Substring(l/3*2);
		}
		else if(l%3==1)
		{
			sf=s.Substring(0,l/3);
			sm=s.Substring(l/3,l/3+1);
			se=s.Substring(l/3*2+1);
		}
		else
		{
			sf=s.Substring(0,l/3+1);
			sm=s.Substring(l/3+1,l/3);
			se=s.Substring(l/3*2+1);
		}
	}
}
---------------------------------------------------------------------------------------
Code through string

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int getCodeThroughStrings(string input1)
    {
        //Read only region end
        //Write code here
		int sum =0,k=0,d;
        string[] arr = input1.Split(' ');
		for(int i=0;i<arr.Length;i++)
		{
			sum = sum+ arr[i].Length;
		}
		while(sum!=0)
		{
			d = sum%10;
			k=k+d;
			sum = sum/10;
		}
		return k;
    }
}

-----------------------------****************************************------------------------------------
Unique digit count

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int uniqueDigitsCount(int input1)
    {
        //Read only region end
        //Write code here
        int n,c=1;
		int[] arr=new int[input1.ToString().Length];
		for(int i=0;i<arr.Length;i++)
		{
			n=input1%10;
			arr[i]=n;
			input1=input1/10;
		}
		Array.Sort(arr);
		for(int i=0;i<arr.Length;i++)
		{
			for(int j=i+1;j<arr.Length;j++)
			{
				if(arr[i]!=arr[j])
				{
					c++;
					i=j;
				}
			}
		}
		return c;
    }
}
------------------------------------
Weight of string

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int weightOfString(string input1,int input2)
    {
        //Read only region end
        //Write code here
         int sum =0;
		char[] arr = new char[input1.Length];
            string input = input1.ToUpper();
            arr = input.ToCharArray();
            if (input2 == 0)
            {
                for (int i = 0; i < arr.Length; i++)
                {
					if(arr[i]>='A'&&arr[i]<='Z')
					{
                    if (arr[i] == 'A' || arr[i] == 'E' || arr[i] == 'O' || arr[i] == 'I' || arr[i] == 'U')
                    {
                        arr[i] = '0';
                    }
                    else if (arr[i] == ' ')
                    {
                        arr[i] = '0';
                    }
                    else
                    {
                        sum += arr[i] - 64;
                    }
					}
                }
            }
            if (input2 == 1)
            {
                for (int i = 0; i < input1.Length; i++)
                {
					if(arr[i]>='A'&&arr[i]<='Z')
					{
                    if (arr[i] == ' ')
                    {
                        arr[i] = '0';
                    }
                    else

                        sum += arr[i] - 64;
                }
				}
            }
		return sum;
    }
}
-----------------------------------
Sum Prime Index data
using System;

namespace sumPrimeIndexData
{
    class Program
    {
        static void Main(string[] args)
        {
            int r, sum = 0;
            //Console.WriteLine("enter a number: ");
            int s = 55555555;
            int[] arr = new int[s.ToString().Length];
            for(int i=0;i<arr.Length;i++)
            {
                r = s % 10;
                arr[i] = r;
                s = s / 10;
            }
            bool isPrime = true;
            for(int i=0;i<arr.Length;i++)
            {
                for(int j=2;j<i;j++)
                {
                    if(i%j==0)
                    {
                        isPrime = false;
                        break;
                    }
                }
                if(isPrime)
                {
                    sum += arr[i];
                }
            }
            Console.WriteLine(sum);
            Console.ReadKey();
        }
    }
}
------------------------------

sum of digits 

int sum=0,m,result=0;
		for(int i=0;;i++)
		{
		sum=0;
		while(input1!=0)
		{
			m=input1%10;
			sum=sum+m;
			input1=input1/10;
		}
		if(sum>=-9 && sum<=9)
		{
		  result= sum;
			break;
		}
		else
			input1=sum;
		}
		return result;
    }
}
-------------------------------

Pin Generation

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int createPIN(int input1,int input2,int input3)
    {
        //Read only region end
        //Write code here
		int max=0;
        String str = input1.ToString()+input2.ToString()+input3.ToString();
		int a = int.Parse(str[0].ToString());
		for(int i=0;i<str.Length;i++)
		{
			
			if (a < int.Parse(str[i].ToString()))
                    a = int.Parse(str[i].ToString());
		}
		int b = Math.Min(int.Parse(str[0].ToString()),int.Parse(str[3].ToString()));
		int str1 = Math.Min(b,int.Parse(str[6].ToString()));
		
		int f = Math.Min(int.Parse(str[1].ToString()),int.Parse(str[4].ToString()));
		int str2 = Math.Min(f,(int.Parse(str[7].ToString())));
		
		int g = Math.Min(int.Parse(str[2].ToString()),int.Parse(str[5].ToString()));
		int str3 = Math.Min(g,(int.Parse(str[8].ToString())));
		
		string stri = a.ToString()+str1.ToString()+str2.ToString()+str3.ToString();
		
		return int.Parse(stri);
    }
}
-------------------------------------------------------------

Number Of Prime in a range

int count=0,temp=0,flag=0;
for(int i=input1;i<=input2;i++)
 {
   flag=0;
   if(i==2)
   {
     count++;
   }
   else
   {
     for(int j=2;j<=i/2;j++)
     {
  	if(i%j==0)
 	{
	   flag=1;
           break;
	}
     }
     if(flag==0)
     {
	count++;
	flag=1;
     }
   }
 }
  return count;
}
-----------------------------------

Non repeated digit count

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int nonRepeatDigitsCount(int input1)
    {
        //Read only region end
        //Write code here
		int count=0;
		String str = input1.ToString();
		for(int i=0;i<str.Length;i++)
		{
			if(str.IndexOf(str[i]) == str.LastIndexOf(str[i]))
				count++;
		}
		return count;
	}
}
---------------------------
Is Palindrome possible

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int isPalinNumPossible(int input1)
    {
        //Read only region end
        //Write code here
        int o=0;
    int[] arr = new int[input1.ToString().Length];
	for(int i=0;i<arr.Length;i++)
	{
		int s=input1%10;
		arr[i]=s;
		input1/=10;
	}
	int[] freq={0,0,0,0,0,0,0,0,0,0};
	for(int i=0;i<arr.Length;i++)
	{
		freq[arr[i]]++;
	}
	for(int i=0;i<freq.Length;i++)
	{
		if(freq[i]%2!=0)
			o++;
	}
	if(o<=1)
		return 2;
	else
		return 1;
	
    }
}

------------------------------
Hill Weight

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int totalHillWeight(int input1,int input2,int input3)
    {
        //Read only region end
        //Write code here
		int sum=0;
        for(int i=0;i<input1;i++)
		{
			for(int j=0;j<=i;j++)
			{
				sum+=input2;
			}
			input2+=input3;
		}
		return sum;
    }
}
------------------------------
Most Frequent digit

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int MostFrequentDigit(int input1,int input2,int input3,int input4)
    {
        //Read only region end
        //Write code here
		int l1 = input1.ToString().Length;
            int l2 = input2.ToString().Length;
            int l3 = input3.ToString().Length;
            int l4 = input4.ToString().Length;
            int l = l1 + l2 + l3 + l4;
            int[] arr = new int[l];
            for(int i=0;i<l1;i++)
            {
                arr[i] = input1 % 10;
                input1 = input1 / 10;
                  
            }
            for (int i = l1; i < l1+l2; i++)
            {
                arr[i] = input2 % 10;
                input2 = input2 / 10;

            }
            for (int i = l1+l2; i < l1+l2+l3; i++)
            {
                arr[i] = input3 % 10;
                input3 = input3 / 10;

            }
            for (int i =l1+l2+l3; i < l1+l2+l3+l4; i++)
            {
                arr[i] = input4 % 10;
                input4 = input4 / 10;

            }
            for(int i=0;i<l;i++)
            {
                Console.WriteLine(arr[i]);
            }
            int[] freq = new int[10];
            for(int i=0;i<arr.Length;i++)
            {
                freq[arr[i]]++;
            }
            int max = freq[0];
            for(int i=1;i<freq.Length;i++)
            {
                if(max<=freq[i])
                {
                    max = freq[i];
                }
            }
            int index = 0;
            for(int i=0;i<freq.Length;i++)
            {
                if(max==freq[i])
                {
                    if(index<i)
                    {
                        index = i;
                    }
                }
            }
		return index;
    }
        
  }
--------------------------------------
Even or odd digit sum

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int EvenOddDigitsSum(int input1,string input2)
    {
        //Read only region end
        //Write code here
        int sum=0,n;
		if(input2 == "odd")
		{
			while(input1!=0)
			{
			n=input1%10;
			if(n%2!=0)
			sum=sum+n;
			input1=input1/10;
			}
		}
		if(input2 == "even")
		{
			while(input1!=0)
			{
			n=input1%10;
			if(n%2==0)
			sum=sum+n;
			input1=input1/10;
			}
		}
		return sum;
    }
}
--------------------------------------
Fibonacii

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public long nthFibonacci(int input1)
    {
        //Read only region end
        //Write code here
        int a = 0, b = 1, c = 0,k=0;   
    for (int i = 2; i < input1; i++)  
    {  
        c= a + b;
        a= b;  
        b= c;  
    }
		return c;
}
}

====================================================
Generate Series Find Nth Element

   int i = 0;
		int a=input2-input1;
		int b= input3-input2;
		for(i=4;i<=input4;i++)
		{
			if(i%2==0)
			{
				input3 += a;
			}
			else
			{
				input3 +=b;
			}
		}
		return input3;

=============================================================
Cyclic Sum

                int sum =0;
		int temp= 0;
		int len =input1.ToString().Length;
		Console.Write(len);
		while(len>0)
		{
			temp=input1;
			for(int i=len;i>0;i--)
		{
			sum = sum + temp%10;
			temp=temp/10;
			
		}
			len--;
			input1=input1/10;
       }
		return sum;



===============================================

Longest odd seq


                int cnt =0;
		int seq=0;
		 for (int i=0;i<input2;i++)
		 {
			 if(input1[i]%2!=0)
			 {
				 cnt++;
			 }
			 else
			 {
				 if(cnt>seq)
				 {
					 seq=cnt;
				 }
				 cnt=0;
			 }
		 }
		if(seq==0)
		return -1;
			return seq;



================================================
Alternate Add Sum



                int sum=input1;
		if(input2==1)
		{
			for(int i=0;i<input1;i++)
			{
				if(i%2==0)
				{
					sum=sum-(input1-i-1);
				}
				else
				{
					sum=sum+(input1-i-1);
				}
			}
		}
			if(input2==2)
		{
			for(int i=0;i<input1;i++)
			{
				if(i%2!=0)
				{
					sum=sum-(input1-i-1);
				}
				else
				{
					sum=sum+(input1-i-1);
				}
			}
		}
		return sum;


========================================================



World Wide Web



                input1=input1.ToUpper();
		string res= "";
		string[] str=input1.Split(' ');
		int a=0;
		for(int i=0;i<str.Length;i++)
		{
			a=0;
			if(str[i].Length%2==0)
			{
				for(int j=0;j<str[i].Length/2;j++)
				{
					a=a+Math.Abs((str[i][j]-64)-(str[i][str[i].Length-j-1]-64));
				}
			}
			else
			{
				for(int j=0;j<=str[i].Length/2;j++)
				{
					if((str[i].Length-1-j)==j)
					{
						a=a+(str[i][j]-64);
					}
					else
					{
						a=a+Math.Abs((str[i][j]-64)-(str[i][str[i].Length-j-1]-64));
					}
				}
			}
			res=res+a.ToString();
		}
		int c=int.Parse(res);
		return c;


------------------------------------------------------------------------------------------------


Get Code Through String



                string[] str = input1.Split(' ');
		int sum=0,k=0,d;
		for(int i=0;i<str.Length;i++)
		{
			sum=sum+str[i].Length;
		}
		while(sum!=0)
		{
			d=sum%10;
			k=k+d;
			sum=sum/10;
		}
		return k;

=======================================================


Simple Encoded Array


                int sum =input1[input2-1];
		for(int i=input2-1;i>0;i--)
		{
			input1[i-1]=input1[i-1]-input1[i];
			sum=sum +input1[i-1];
		}
		
		Result res=new Result();
		res.output1=input1[0];
		res.output2=sum;
		return res;


===============================================================

Decreasing Sequence


                int cnt=0;
		int seq=0;
		int n=0;
		for(int i=0;i<input2-1;i++)
		{
			if(input1[i]>input1[i+1])
			{
				cnt++;
			}
			if (input1[i]<input1[i+1] || i==input2-2)
			{
				if(cnt>seq)
				{
					seq=cnt;
				}
				if(cnt>0)
				{
					n++;
				}
				cnt=0;
			}
			
		}
		Result res=new Result();
		res.output1=n;
		if(n>0)
		res.output2=seq+1;
		else
			res.output2=seq;
		return res;

============================================================================


Sum of Powers of Digits


        int[] arr=new int[input1.ToString().Length];
        int j=0;
        double sum =1;
        while(input1!=0)
        {
            
            arr[j]=input1%10;
            //Console.Write(arr[j]);
            j++;
            input1=input1/10;
        }
        Array.Reverse(arr);
        for(int i=0;i<arr.Length-1;i++)
        {
            sum = sum + Math.Pow(arr[i],arr[i+1]);
        }
        return Convert.ToInt32(sum);


==========================================================================

Sum of Sums of Digit


                int[] arr=new int[20];
		int sum=0;
		int j=0;
		while(input1!=0)
		{
			arr[j]=input1%10;
			j++;
			input1/=10;
		}
		for(int i=0;i<j;i++)
		{
			for(int k=0;k<=i;k++)
			{
			   sum=sum+arr[k];
			}
		}
		return sum;
}
******************************************************************************
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public string findSequence(int input1,string[] input2,int[] input3)
    {
        //Read only region end
        int[]n=new int[input1];
		string s="";
		int[] arr=new int[3];
		for(int i=0;i<input1;i++)
		{
			n[i]=input3[i];
		}
		Array.Sort(n);
		for(int j=0;j<input1-2;j++)
		{
			if(n[j]+1==n[j+1] && n[j+1]+1==n[j+2])
			{
				arr[0]=n[j];
			}
		}
		if(arr[0]!=0)
		{
			arr[1]=arr[0]+1;
			arr[2]=arr[1]+1;
			for(int k=0;k<input1;k++)
			{
				if(arr[0]==input3[k])
				{
					s=s+input2[k]+":";
				}
			}
			for(int k=0;k<input1;k++)
			{
				if(arr[1]==input3[k])
				{
					s=s+input2[k]+":";
				}
			}
			for(int k=0;k<input1;k++)
			{
				if(arr[2]==input3[k])
				{
					s=s+input2[k];
				}
			}
			return s;
		}
		else
		{
			return "NONE";
		}
        
    }
}
*************************************************************************************************************************
Array Traverse

using System.Linq;     
int c=0,f=0,k=0;
int key=0,addr=0,sum=0;
for(int i=0;i<input2;i++)
{
if(input1[i]>0)

{
c++;
}
}
if(c==input2)
{
sum=input1.Max();
}
else
{
while(f==0)
{
if(input1[j]>0)
{
f=0;
}
else
{
f=1;
}
if(input1[j>99)
{
addr=Math.Abs(input1[j]%100);
key=Math.Abs(input1[j]%100);
}
else
{
addr=Math.Abs(input1[j]%10);
key=Math.Abs(input1[j]%10);
}
j=addr;
if(k%2==0)
{
sum+=key;
}
else
{
sum-=key;
}
k++;
}
}
return sum;
}
}

***************************************************************************************************************************
string[] s=input1.Split(' ');
string s1="",s2="",result="",ans="";
for(int i=0;i<s.Length;i++)
{
char[] ch=s[i].ToCharArray();
for(int j=0;j<ch.Length;j++)
{
if(j%2==0)
{
s1=s1+ch[j];
}
else
{
s2=s2+ch[j];
}}
if(input2==2)
{
ans=s1+s2;
}
else
{
char[] ch1=s2.ToCharArray();
Array.Reverse(ch1);
ans=s1+new string(ch1);
}
result+=ans+" ";
ans="";
s1="";
s2="";
}
return result.Substring(0,result.Length-1);
}
}
=============================================================================================================================
Token Sequence

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public double FindAverage(int input1)
    {
        //Read only region end
        int i=0;
		double sum=0,avg=0;
		int len=0;
		int[] n=new int[input1.ToString().Length];
		do
		{
			n[i]=input1%10;
			i++;
			input1=input1/10;
		}while(input1!=0);
		Array.Reverse(n);
		for(int j=0;j<n.Length;j++)
		{
			sum=sum+n[j];
		}
		if(n[0]==0)
		{
			len=n.Length-1;
		}
		else
		{
			len=n.Length;
		}
		
		avg=sum/len;
		return Math.Round(avg,2);
    }
}

=========================================================================================================================
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int SumOfPowerOfDigits(int input1)
    {
        //Read only region end
        int[] n=new int[input1.ToString().Length];
		int k=0,len=0,i=0;
		int sum=0,res=0;
		while(input1!=0)
		{
			n[i]=input1%10;
			i++;
			input1=input1/10;
		}
		Array.Reverse(n);
		len=n.Length;
		for(int j=0;j<n.Length-1;j++)
		{
			k=j+1;
			if(k==n.Length)
			{
				break;
			}
			else
			{
				sum=sum+(int)Math.Pow(n[j],n[k]);
			}
		}
		res=sum+(int)Math.Pow(n[n.Length-1],len);
		return res;
    }
}
=========================================================================================================================
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int LeastFrequentDigit(int input1,int input2,int input3,int input4)
    {
        //Read only region end
         int[] arr=new int[10];
		do
		{
			arr[input1%10]++;
			input1 /=10;
		}
		while(input1!=0);
		do
		{
			arr[input2%10]++;
			input2 /=10;
		}
		while(input2!=0);
		do
		{
			arr[input3%10]++;
			input3 /=10;
		}
		while(input3!=0);
		do
		{
			arr[input4%10]++;
			input4 /=10;
		}
		while(input4!=0);
		int min=100,pos=0;
		for(int i=0;i<arr.Length;i++)
		{
			if(arr[i]<min && arr[i]!=0)
			{
				min=arr[i];
				pos=i;
			}
		}
		return pos;
    }
}
==============================================================================================================================

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public Boolean StepNumber(int input1)
    {
        //Read only region end
       bool b=false;
	
		int[] n=new int[input1.ToString().Length];
		int i=0,sum=0,k=0;
		while(input1!=0)
		{
		n[i]=input1%10;
			i++;
			input1=input1/10;
		}
		Array.Reverse(n);
		for(int j=0;j<n.Length;j++)
		{
			k=j+1;
			if(k==n.Length)
			{
				break;
			}
			else{
				sum=(int)Math.Abs(n[j]-n[k]);
			}
			if(sum==1|| sum==0)
				{
					b=true;
				}
				else
				{
					b=false;
					break;
				}
			}
			return b;
		
		}
		
    }

=========================================================================================================================
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int FindNumberOfOccurrence(int input1,int input2)
    {
        //Read only region end
       string s="";
		int count=0;
		for(int i=0;i<=input2;i++)
		{
			s=Convert.ToString(i);
			for(int j=0;j<s.Length;j++)
			{
				if(input1==char.GetNumericValue(s[j]))
				{
					count++;
				}
			}
		}
		return count;
		
		
    }
}
============================================================================================================================
	WORD STATICS


public class UserMainCode
{
    public string StringStatistics(string input1)
    {
        //Read only region end
        //Write code here
		string str="";
		int a = 0,b=0;
		string res="";
		foreach(char c in input1){
			if(char.IsLetter(c)){
				b++;
				str += c.ToString();
			}
			else 
			{
				a +=(int)c-48;
				Console.WriteLine(a);
			}
		}
		if(b==input1.Length||b==0)
		{
			return "ZERO";
		}else return 	res = b.ToString()+str+a.ToString();
		
        //throw new NotImplementedException("Method  StringStatistics(string input1) not Implemented.");
    }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class UserMainCode
{
    public int weightOfString(string input1,int input2)
    {
        //Read only region end
        //Write code here
		input1 = input1.ToUpper();
		int sum=0;
		if(input2==0){
			foreach(char c in input1)
			{
				if(char.IsLetter(c)){
				if(c!='A' && c!='E' && c!='I' && c!='O' && c!='U')
				{
					sum += c -64;
				}
				
			}
				else
				{
					sum += 0;
				}
			}
		}
		if(input2==1){
			foreach(char c in input1){
				if(char.IsLetter(c)){
					sum += c -64;
				}
				else{
					sum += 0;
				}
			}
			
		}
		return sum;
        //throw new NotImplementedException("Method  weightOfString(string input1,int input2) not Implemented.");
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
CYCLIC DIGITS


public class UserMainCode
{
    public int sumOfSumsOfDigits(int input1)
    {
        //Read only region end
        //Write code here
		int i=0;
		int sum=0,p=1;
		int[] arr = new int[input1.ToString().Length];
		while(input1!=0){
			arr[i] = input1%10;
			i++;
			input1 /= 10;
		}
		Array.Reverse(arr);
		foreach(int a in arr){
			sum += a*p;
			p++;
		}
		return sum;
       // throw new NotImplementedException("Method  sumOfSumsOfDigits(int input1) not Implemented.");
    }
}
------------------------------------------------------------------------------------------------------------------------------
LINK 1


public class UserMainCode
{
    public double FindAverage(int input1)
    {
        //Read only region end
        //Write code here
		int i =0;double sum=0;
		double avg =0;
		int len = input1.ToString().Length;
		int[] arr = new int[input1.ToString().Length];
		while(input1!=0){
			arr[i] = input1%10;
			i++;
			input1 /= 10;
			if(arr[0]==0)
                          {
				len = input1.ToString().Length - 1;
			}
		}
		foreach(int a in arr){
			sum += a;
		}
		avg = sum/len;
		return System.Math.Round(avg,2);
        //throw new NotImplementedException("Method  FindAverage(int input1) not Implemented.");
    }
}
----------------------------------------------------------------------------------------------------------------------
LEAST FREQUENT


public class UserMainCode
{
    public int LeastFrequentDigit(int input1,int input2,int input3,int input4)
    {
        //Read only region end
        //Write code here
		int[] arr = new int[10];
		do{
			arr[input1%10]++;
			input1 /= 10;
		}
		while(input1!=0);
		do{
			arr[input2%10]++;
			input2 /= 10;
		}while(input2!=0);
		do{
			arr[input3%10]++;
			input3 /= 10;
		}while(input3!=0);
		do{
			arr[input4%10]++;
			input4 /= 10;
		}while(input4!=0);
		int min =100,pos=0;
		for(int i=0;i<arr.Length;i++){
			if(arr[i]<min && arr[i]!=0){
				min=arr[i];
				pos =i;
			}
		}
		return pos;
       // throw new NotImplementedException("Method  LeastFrequentDigit(int input1,int input2,int input3,int input4) not Implemented.");
    }
}
*************************************************************************************************************************************************************
FIND OCCURENCE



public class UserMainCode
{
    public int FindNumberOfOccurrence(int input1,int input2)
    {
        //Read only region end
        string s="";
		int count=0;
		for(int i=0;i<=input2;i++)
		{
		 	s=Convert.ToString(i);
			for(int j=0;j<s.Length;j++)
			{
				if(input1==char.GetNumericValue(s[j]))
				{
					count++;
				}
			}
		}
		return count;
		}
	
    }
--------------------------------------------------------------------------------------------------------------------------------
STEP NUMBER


public class UserMainCode
{
    public Boolean StepNumber(int input1)
    {
        //Read only region end
    int j=0,m=0;
		bool isstepno=false;
		string str=Convert.ToString(input1);
		for(int i=0;i<str.Length;i++)
		{
			j=i+1;			
			if(j==str.Length)
			{
			 break;
			}
			
			
				m=Math.Abs((int)char.GetNumericValue(str[i])-(int)char.GetNumericValue(str[j]));
				Console.Write(m);
						
		      if(m==1||m==0)
		      {
		          	isstepno=true;
		      }
			 else 
			 {
			     	isstepno=false;
				    break;
			 }
         }
		
		
		return isstepno;
	}
	
}
------------------------------------------------------------------------------------------------------------------------------
SUM OF POWER OF DIGITS:


public class UserMainCode
{
    public int SumOfPowerOfDigits(int input1)
    {
        //Read only region end
	int j=0;
		string s="";
		int sum=0;
		string str=Convert.ToString(input1);
		for(int i=0;i<str.Length;i++)
		{
			
			j=i+1;
			if(j==str.Length)
			{
				break;
			}
		int m=(int)Math.Pow((int)char.GetNumericValue(str[i]),(int)char.GetNumericValue(str[j]));			
		//m=0;
		sum+=m;		
		}
        sum+=(int)Math.Pow((int)char.GetNumericValue(str[str.Length-1]),str.Length);
		return sum;
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
FIND STRING

using System;
using System.Collections.Generic;
using System.Text;


public class UserMainCode
{
    public string FindString(string input1)
    {
        //Read only region end
          
		string s1="";
		string[] str=input1.Split(' ');
		for(int i=0;i<str.Length;i++)
		{
			char[] ch=str[i].ToCharArray();
			for(int j=0;j<ch.Length;j++)
			{
				if(char.IsUpper(ch[j]))
				{
					int m=ch[j]+ch.Length;
					if(m>=90)
					{
						s1+='Z';
					}
					else
					{
						s1+=(char)m;
					}
				}
				else if(char.IsLower(ch[j]))
				{
					int m=ch[j]+ch.Length;
					if(m>=122)
					{
						s1=s1+'z';
					}
					else
					{
						s1+=(char)m;
					}
					
				}	
			
		}
			s1+=" ";
	}
		StringBuilder sb=new StringBuilder(s1);
			sb.Remove(s1.Length-1,1);
			
			return sb.ToString();
    }

}
==================================================================================================================================================================


********************************************************************************************************************
password

string[] str1=Splitstring(input1);
string[] str2=Splitstring(input2);
string password=str1[1].ToString()+str2[1].ToString()+str2[0].ToString();
return password;
}
string Splitstring(string s)
{
int l=s.Length;
int rem=l%3;
int q=l/3;
string[] str=new string[3];
if(rem==0)
{
str[0]=s.Substring(0*q,q);
str[1]=s.Substring(1*q,q);
str[2]=s.Substring(2*q,q);
}
if(rem==1)
{
str[0]=s.Substring(0*q,q);
str[1]=s.Substring(1*q,q+1);
str[2]=s.Substring((2*q)+1,q);
}
if(rem==2)
{
str[0]=s.Substring(0*q,q+1);
str[1]=s.Substring((1*q)+1,q);
str[2]=s.Substring((2*q)+1,q+1);
}
return str;
}
}
***************************************************************************************************************************************************************
\using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int getLen_LS_ODD(int[] input1,int input2)
    {
        //Read only region end
         int count=0,seq=0;
		
		for(int i=0;i<input2;i++)
		{
			if(input1[i]%2!=0)
			{
				count++;
			}
			else
			{
				if(count>seq)
				{
					seq=count;
				}
				count=0;
			}
			
		}
		if(seq==0)
			return -1;
		return seq;
    }
}
************************************************************************************************************************************************************
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int AddSub(int input1,int input2)
    {
        //Read only region end
       int res=input1;
		for(int i=0,j=input1-1;j>0;i++,j--)
		{
			if(input2==1)
			{
			if(i%2==0)
			{
				res-=j;
			}
				else
				
					res+=j;
				
				
			}
			if(input2==2)
			{
			if(i%2==0)
			{
				res+=j;
			}
				else
				
					res-=j;
			}
				
			}
			
		
        return res;
    }
}
************************************************************************************************************************************************************
Generate Seris and find nth term


public class UserMainCode
{
    public int seriesN(int input1,int input2,int input3,int input4)
    {
        //Read only region end
        //Write code here
        int diff1=input2-input1;
		int diff2=input3-input2;
		int res=input3;
		for(int i=4,j=0;i<=input4;i++,j++)
		{
			if(j%2==0)
			{
				res+=diff1;
			}
			else
			{
				res+=diff2;
			}
		}
		return res;
    }
}
**************************************************************************************************************************************************************

public class UserMainCode
{
    public int sumOfSumsOfDigits(int input1)
    {
        //Read only region end
       
		int i=0,sum=0,p=1;
		int[] n =new int[input1.ToString().Length];
		while(input1!=0)
		{
			n[i]=input1%10;
			i++;
			input1 /=10;
		}
		foreach(int a in n)
		{
			sum=sum+a*p;
			p++;
		}
		return sum;
    }
}

============================================================================================================================================================
TODAY IS A NICE DAY

class Program
    {
        static void Main(string[] args)
        {
            string x="", y="",p="",q="";
            string str="This is a nice day";
            string[] st1 = str.Split(' ');
            int num1 = 4, num2 = 1;
            string s1 = st1[num1-1];
            string s2 = st1[num2-1];
            int l1 = s1.Length;
            int l2 = s2.Length;
          bool b1 =  IsEven(l1);
            bool b2 = IsEven(l2);
            if (b1)
            {
                 x = s1.Substring(0,(l1/2));
                p = s1.Substring((l1 / 2) );
            }
            else
            {
                x = s1.Substring(0, (l1 / 2)+1);
                p = s1.Substring((l1 / 2) + 2);
            }
            if (b2)
            {
                y = s2.Substring(0, (l2 / 2));
               q = s2.Substring((l2 / 2) );
            }
            else
            {
                y = s2.Substring(0, (l2 / 2) + 1);
               q = s2.Substring((l2 / 2));

            }
           
            char[] ch = x.ToCharArray();
            Array.Reverse(ch);
            String a = new string(ch);
            char[] ch1 = y.ToCharArray();
            Array.Reverse(ch1);
            String b = new string(ch1);

            string one = String.Concat(a, p);
            Console.Write(one);
            Console.Write(" ");

            string two = String.Concat(b, q);
            Console.WriteLine(two);

        }
        public static bool IsEven(int n)
        {
            if (n % 2 == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
*******************************************************************************************************************************
